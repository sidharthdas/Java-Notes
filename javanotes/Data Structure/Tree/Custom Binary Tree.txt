Custom Binary Tree:

package com.manoj;

public class BinaryTreeNode {

	BinaryTreeNode left;
	BinaryTreeNode right;
	int data;
	
	public BinaryTreeNode(int data) {
		this.data=data;
		left=null;
		right=null;
	}
	public BinaryTreeNode getLeft() {
		return left;
	}
	public void setLeft(BinaryTreeNode left) {
		this.left = left;
	}
	public BinaryTreeNode getRight() {
		return right;
	}
	public void setRight(BinaryTreeNode right) {
		this.right = right;
	}
	public int getData() {
		return data;
	}
	public void setData(int data) {
		this.data = data;
	}
	
}


---------------------------------------------------

package com.manoj;

public class BinaryTreeNodeImplementation {

	BinaryTreeNode root;
	
	
	public BinaryTreeNodeImplementation() {
	
		root = null;
	}

	public void insert(int data) {
		root=add(root,data);
	}
	
	public BinaryTreeNode add(BinaryTreeNode node,int data) {
		
		if(node==null) {
			node=new BinaryTreeNode(data);
			
		}else {
			if(node.getRight()==null) {
				node.right=add(node.right,data);
			}else {
				node.left=add(node.left,data);
			}
		}
		
		return node;
	}
	
	 public boolean isEmpty()
     {
         return root == null;
     }
	
	public boolean search(int data) {
		boolean result=search(root,data);
		return result;
	}
	public boolean search(BinaryTreeNode node,int data) {
		
		if(node.data==data)
			return true;
		if(node.left!=null) {
			if(search(node.left,data))
				return true;
		}
		if(node.right!=null)
			if(search(node.right,data))
		return true;
		
		return false;
	}
	
	  public int totalNumberOfNodes()
	     {
		  int count=totalNumberOfNodes(root);
	         return count;
	     }
	    

		private int totalNumberOfNodes(BinaryTreeNode node)
	     {
	         if (node == null)
	             return 0;
	         else
	         {
	             int count = 1;
	             System.out.println(node.getData());
	             count =count+ totalNumberOfNodes(node.getLeft());
	             System.out.println(node.getData());
	             count =count+ totalNumberOfNodes(node.getRight());
	             System.out.println(node.getData());
	             return count;
	         }
	     }
		
		public void preOrder() {
			System.out.println("preOrder......");
			preOrder(root);
		}
		
		private void preOrder(BinaryTreeNode node) {
			if(node!=null) {
				System.out.print(node.data+" ");
				preOrder(node.left);
				preOrder(node.right);
			}
		}
		
		public void inOrder() {
			System.out.println("inOrder......");
			inOrder(root);
		}
		
		public void inOrder(BinaryTreeNode node) {
			if(node!=null) {
				
				inOrder(node.left);
				System.out.print(node.data+" ");
				inOrder(node.right);
				
			}
		}
		
		public void postOrder() {
			System.out.println("postOrder......");
			postOrder(root);
		}
		
		public void postOrder(BinaryTreeNode node) {
			if(node!=null) {
				
				postOrder(node.left);
				postOrder(node.right);
				System.out.print(node.data+" ");
			}
		}
	
}



-----------------------------------------------------------------

package com.manoj;

public class BinaryTreeMain {

	public static void main(String  []args) {
	BinaryTreeNodeImplementation btn=new BinaryTreeNodeImplementation();
	System.out.println(btn.isEmpty());
	btn.insert(10);
	btn.insert(20);
	btn.insert(30);
	btn.insert(40);
	btn.insert(50);
	//System.out.println(btn.search(40));
	System.out.println(btn.totalNumberOfNodes());
	System.out.println(btn.isEmpty());
	System.out.println(btn.search(70));
	btn.preOrder();
	btn.inOrder();
	btn.postOrder();
	
	}
}
