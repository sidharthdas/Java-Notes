import java.util.Stack;

class Parenthesis
{
	// Function to find duplicate parenthesis in an expression
	public static boolean duplicateparenthesis(String exp)
	{
		// take a empty stack of characters
		Stack<Character> stack = new Stack();

		// traverse the input expression
		for (int i = 0; i < exp.length(); i++)
		{
			// if current char in the expression is a not a 
			// closing parenthesis
			if (exp.charAt(i) != ')') {
				stack.push(exp.charAt(i));
			}
			// if current char in the expression is a closing parenthesis
			else
			{
				// if we top element in the stack is an opening parenthesis,
				// the sub-expression of the form ((exp)) is found
				if (stack.peek() == '(') {
					return true;
				}

				// pop till '(' is found for current ')'
				while (stack.peek() != '(') {
					stack.pop();
				}

				// pop '('
				stack.pop();
			}
		}

		// if we reach here, then the expression does not have any
		// duplicate parenthesis
		return false;
	}

	public static void main(String[] args)
	{
		String exp = "((x+y))";

		if (duplicateparenthesis(exp)) {
			System.out.println("The expression have duplicate parenthesis.");
		} else {
			System.out.println("The expression does not have duplicate " +
								"parenthesis");
		}
	}
}