Again, the solution above is self-explained, but look redundant. 
For the case where 4, 40, 400, 9, 90, 900, we can see that if the first character 
is less than second, e.g. 4 is IV, we know that it must be in either the case above.
 Else, VI, we know that it is 5 + 1 = 6. 
Consequently, we can use this property to shorten the code above.


public class Solution {
    public int romanToInt(String s) {
        if (s == null || s.length() == 0) return 0;
         
        // create a hash table to store the dictorary
        HashMap<Character, Integer> hashMap = new HashMap<Character, Integer>();
        hashMap.put('I', 1);
        hashMap.put('V', 5);
        hashMap.put('X', 10);
        hashMap.put('L', 50);
        hashMap.put('C', 100);
        hashMap.put('D', 500);
        hashMap.put('M', 1000);
         
        int num = 0;
         
        for (int i = 0; i < s.length(); i++) {
            if (i <= s.length() - 2 && 
                hashMap.get(s.charAt(i)) < hashMap.get(s.charAt(i + 1))) {
                num -= hashMap.get(s.charAt(i));
            } else {
                num += hashMap.get(s.charAt(i));
            }
        }
        return num;
    }
}