
Kafka Theory
------------

Apache kafka was originated by Linked in and later become an open source Apache product
Kafka is written in Java and scala
Kafka is fast, scalable, durable, fault tolerant and distributed by design
Apache kafka reduces the data pipelines
It makes system communication more simple and manageable
With kafka it is easy to establish remote communication and send messages across network

Kafka feature
-------------
1. Scalable -- Highly scalable system with no downtime. Kafka cluster having multiple broker
 will take care of all the messages coming from the producers.
2. Hige volume of data can be taken care by Kafka which are generated by producers and send 
them to consumer seamlessly.
3. Fault tolerant -- if there is failure of one node then all data which is present in that 
node will have replicas on some other system
4. Durable - it is durable because it is uses distributed commit log i;e messages persist on 
the disk as fast as possible  
5. Performance is good performance. high throughput- large amount of data transfered in a given time.

Components:
-----------
Brokers: they are servers that manage and mediate the conversation between two different system.
They are responsible for the delivery of the messages to the right party.

Messages - It is simply the bytes of array and any objects can be stored in any format like json, String etc.

Topic - Messages are published stored and oragnized in topics

Clusters - In Kafka more than 1 broker , a set of servers is collectively is known as clusters.
It is group of system having one instance of kafka broker.

Partitions: Every broker holds few partition and each partition can be either a leader or replicas for a topic.
All read and write of a topic go via the leader which is responsible for updating replicas with new data
If leader fails replica takes over.

Kafka Producers:
--------------------
Producers send messages to topic.
It select the topic to send the message per topic
It can implement priority system which are based on sending message to certain partition depending 
upon the priority of the record.
It sends the messages to the partition based on record's key
It don't wait for the acknowledment from the broker and will keep sending messages to the broker

Kafka Broker:
--------------------
A cluster typically consists of multiple brokers to maintain load balance
A broker on receiving messages from the producer assigns offset to them and and commits the messages to the disk storage.
One broker instance can handle thousands to read and write per second and Terabytes of messages
Backups of topic partition are present in multiple brokers
If a one of the brokers is down then replicas broker will be selected as leader for the partition

Kafka Topics and Partition:
----------------------------------
Messages in kafka are categorized into topic
Topics are broken down into number of partition
Reading of message can be from begining to end or skip or rewind to any point of the partition by providing offset value
offset values are sequentital number provided to messages
Partition can be hosted on different servers, thus a single topic can be scaled horizontally across multiple servers

Lets assume a topic is configured to 4 partitions and partition has an id 0,1,2,3 and if set the replication factor to 3, 
then kafka will create three identical replicas on each partition which means partition 0 will have 3 replicas , similarly 
partition 1,2,3 each will have 3 replicas .
id of the replica will be same as id of the broker that hosts it.

Kafka consumer:
---------------
Consumer can subscribe one or more topics and read messages in the order they were produced
Consumer keeps track of the messages offset which has alreday been read
Consumer work as part of consumer group i:e one or more consumer that work together to consume a topic
Messages with same key will arrive at the same consumer
Each partition is consumed by one consumer
One consumer can read more than one partition 
