Strategy design pattern 
===============================

It is one of the behavioral design pattern. Strategy pattern is used when we have multiple 
algorithm for a specific task and client decides the actual implementation to be used at runtime.

Strategy pattern is also known as Policy Pattern. We define multiple algorithms and let client 
application pass the algorithm to be used as a parameter.

One of the best example of strategy pattern is Collections.sort() method that takes Comparator parameter. 
Based on the different implementations of Comparator interfaces, the Objects are getting sorted in different ways.

Strategy Design Pattern Important Points
-----------------------------------------------
We could have used composition to create instance variable for strategies but we
should avoid that as we want the specific strategy to be applied for a particular task. 
Same is followed in Collections.sort() and Arrays.sort() method that take comparator as argument.
 
Strategy Pattern is very similar to State Pattern. One of the difference is that Context contains 
state as instance variable and there can be multiple tasks whose implementation can be dependent 
on the state whereas in strategy pattern strategy is passed as argument to the method and context 
object doesnâ€™t have any variable to store it.

Strategy pattern is useful when we have multiple algorithms for specific task and we want our application
 to be flexible to chose any of the algorithm at runtime for specific task.

Implementation
-----------------
============
Step 1
===========
Create an interface.

Strategy.java

public interface Strategy {
   public int doOperation(int num1, int num2);
}

===========
Step 2
===========
Create concrete classes implementing the same interface.

OperationAdd.java

public class OperationAdd implements Strategy{
   @Override
   public int doOperation(int num1, int num2) {
      return num1 + num2;
   }
}
OperationSubstract.java

public class OperationSubstract implements Strategy{
   @Override
   public int doOperation(int num1, int num2) {
      return num1 - num2;
   }
}
OperationMultiply.java

public class OperationMultiply implements Strategy{
   @Override
   public int doOperation(int num1, int num2) {
      return num1 * num2;
   }
}

=============
Step 3
=============
Create Context Class.

Context.java

public class Context {
   private Strategy strategy;

   public Context(Strategy strategy){
      this.strategy = strategy;
   }

   public int executeStrategy(int num1, int num2){
      return strategy.doOperation(num1, num2);
   }
}

===========
Step 4
===========
Use the Context to see change in behaviour when it changes its Strategy.

StrategyPatternDemo.java

public class StrategyPatternDemo {
   public static void main(String[] args) {
      Context context = new Context(new OperationAdd());		
      System.out.println("10 + 5 = " + context.executeStrategy(10, 5));

      context = new Context(new OperationSubstract());		
      System.out.println("10 - 5 = " + context.executeStrategy(10, 5));

      context = new Context(new OperationMultiply());		
      System.out.println("10 * 5 = " + context.executeStrategy(10, 5));
   }
}

=============
Step 5
=============
Verify the output.

10 + 5 = 15
10 - 5 = 5
10 * 5 = 50 