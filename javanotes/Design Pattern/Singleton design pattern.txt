Singleton Design Pattern 
-----------------------------------
The singleton pattern is one of the simplest design patterns. Sometimes we need to have only one instance of our class for example a single DB connection 
shared by multiple objects as creating a separate DB connection for every object may be costly. Similarly, there can be a single configuration manager or 
error manager in an application that handles all problems instead of creating multiple managers.

Definition:
The singleton pattern is a design pattern that restricts the instantiation of a class to one object.
Let’s see various design options for implementing such a class. If you have a good handle on static class variables and access modifiers this should 
not be a difficult task.

Method 1: Classic Implementation

// Classical Java implementation of singleton  
// design pattern 
class Singleton 
{ 
    private static Singleton obj; 
  
    // private constructor to force use of 
    // getInstance() to create Singleton object 
    private Singleton() {} 
  
    public static Singleton getInstance() 
    { 
        if (obj==null) 
            obj = new Singleton(); 
        return obj; 
    } 
} 

Here we have declared getInstance() static so that we can call it without instantiating the class. The first time getInstance() is called it creates
 a new singleton object and after that it just returns the same object. Note that Singleton obj is not created until we need it and call getInstance() method.
 This is called lazy instantiation.

The main problem with above method is that it is not thread safe. Consider the following execution sequence.

singleton

This execution sequence creates two objects for singleton. Therefore this classic implementation is not thread safe.


Method 2: make getInstance() synchronized

// Thread Synchronized Java implementation of  
// singleton design pattern 
class Singleton 
{ 
    private static Singleton obj; 
  
    private Singleton() {} 
  
    // Only one thread can execute this at a time 
    public static synchronized Singleton getInstance() 
    { 
        if (obj==null) 
            obj = new Singleton(); 
        return obj; 
    } 
} 
Here using synchronized makes sure that only one thread at a time can execute getInstance().
The main disadvantage of this is method is that using synchronized every time while creating the singleton object is expensive and may 
decrease the performance of your program. However if performance of getInstance() is not critical for your application this method provides
 a clean and simple solution.

 -----------------------------------------------------------------------------

Method 3: Eager Instantiation

// Static initializer based Java implementation of 
// singleton design pattern 
class Singleton 
{ 
    private static Singleton obj = new Singleton(); 
  
    private Singleton() {} 
  
    public static Singleton getInstance() 
    { 
        return obj; 
    } 
} 
Here we have created instance of singleton in static initializer. JVM executes static initializer when the class is loaded and 
hence this is guaranteed to be thread safe. Use this method only when your singleton class is light and is used throughout the execution of your program.

-----------------------------------------------------------------------------------
 
Method 4 (Best): Use “Double Checked Locking”
If you notice carefully once an object is created synchronization is no longer useful because now obj will not be null and 
any sequence of operations will lead to consistent results.
So we will only acquire lock on the getInstance() once, when the obj is null. This way we only synchronize the first way through, just what we want.

// Double Checked Locking based Java implementation of 
// singleton design pattern 
class Singleton 
{ 
    private volatile static Singleton obj; 
  
    private Singleton() {} 
  
    public static Singleton getInstance() 
    { 
        if (obj == null) 
        { 
            // To make thread safe 
            synchronized (Singleton.class) 
            { 
                // check again as multiple threads 
                // can reach above step 
                if (obj==null) 
                    obj = new Singleton(); 
            } 
        } 
        return obj; 
    } 
} 
We have declared the obj volatile which ensures that multiple threads offer the obj variable correctly when it is being initialized to Singleton instance. 
This method drastically reduces the overhead of calling the synchronized method every time.

--------------------------------------------------------------------------------- 

How to prevent Singleton Pattern from Reflection, Serialization and Cloning?

Reflection: Reflection can be caused to destroy singleton property of singleton class, as shown in following example:

// Java code to explain effect of Reflection 
// on Singleton property 
  
import java.lang.reflect.Constructor; 
  
// Singleton class 
class Singleton  
{ 
    // public instance initialized when loading the class 
    public static Singleton instance = new Singleton(); 
      
    private Singleton()  
    { 
        // private constructor 
    } 
} 
  
public class GFG  
{ 
  
    public static void main(String[] args) 
    { 
        Singleton instance1 = Singleton.instance; 
        Singleton instance2 = null; 
        try
        { 
            Constructor[] constructors =  
                    Singleton.class.getDeclaredConstructors(); 
            for (Constructor constructor : constructors)  
            { 
                // Below code will destroy the singleton pattern 
                constructor.setAccessible(true); 
                instance2 = (Singleton) constructor.newInstance(); 
                break; 
            } 
        } 
      
        catch (Exception e)  
        { 
            e.printStackTrace(); 
        } 
          
    System.out.println("instance1.hashCode():- " 
                                      + instance1.hashCode()); 
    System.out.println("instance2.hashCode():- " 
                                      + instance2.hashCode()); 
    } 
} 
Output:-
instance1.hashCode():- 366712642
instance2.hashCode():- 1829164700
After running this class, you will see that hashCodes are different that means, 2 objects of same class are created and singleton pattern has been destroyed.


Overcome reflection issue: To overcome issue raised by reflection, enums are used because java ensures internally that enum value is instantiated only once. 
Since java Enums are globally accessible, they can be used for singletons. Its only drawback is that it is not flexible i.e it does not allow lazy initialization.


//Java program for Enum type singleton 
public enum GFG  
{ 
  INSTANCE; 
} 
As enums don’t have any constructor so it is not possible for Reflection to utilize it. Enums have their by-default constructor, 
we can’t invoke them by ourself. JVM handles the creation and invocation of enum constructors internally. As enums don’t give their 
constructor definition to the program, it is not possible for us to access them by Reflection also. Hence, reflection can’t break singleton property in case of enums.

-----------------------------------------------------------------

Serialization:- Serialization can also cause breakage of singleton property of singleton classes. Serialization is used to convert 
an object of byte stream and save in a file or send over a network. Suppose you serialize an object of a singleton class. 
Then if you de-serialize that object it will create a new instance and hence break the singleton pattern.

// Java code to explain effect of  
// Serilization on singleton classes 
import java.io.FileInputStream; 
import java.io.FileOutputStream; 
import java.io.ObjectInput; 
import java.io.ObjectInputStream; 
import java.io.ObjectOutput; 
import java.io.ObjectOutputStream; 
import java.io.Serializable; 
  
class Singleton implements Serializable  
{ 
    // public instance initialized when loading the class 
    public static Singleton instance = new Singleton(); 
      
    private Singleton()  
    { 
        // private constructor 
    } 
} 
  
  
public class GFG  
{ 
  
    public static void main(String[] args)  
    { 
        try
        { 
            Singleton instance1 = Singleton.instance; 
            ObjectOutput out 
                = new ObjectOutputStream(new FileOutputStream("file.text")); 
            out.writeObject(instance1); 
            out.close(); 
      
            // deserailize from file to object 
            ObjectInput in  
                = new ObjectInputStream(new FileInputStream("file.text")); 
              
            Singleton instance2 = (Singleton) in.readObject(); 
            in.close(); 
      
            System.out.println("instance1 hashCode:- "
                                                 + instance1.hashCode()); 
            System.out.println("instance2 hashCode:- " 
                                                 + instance2.hashCode()); 
        }  
          
        catch (Exception e)  
        { 
            e.printStackTrace(); 
        } 
    } 
} 
Output:- 
instance1 hashCode:- 1550089733
instance2 hashCode:- 865113938
As you can see, hashCode of both instances is different, hence there are 2 objects of a singleton class. Thus, the class is no more singleton.

Overcome serialization issue:- To overcome this issue, we have to implement method readResolve() method.

// Java code to remove the effect of  
// Serialization on singleton classes 
import java.io.FileInputStream; 
import java.io.FileOutputStream; 
import java.io.ObjectInput; 
import java.io.ObjectInputStream; 
import java.io.ObjectOutput; 
import java.io.ObjectOutputStream; 
import java.io.Serializable; 
  
class Singleton implements Serializable  
{ 
    // public instance initialized when loading the class 
    public static Singleton instance = new Singleton(); 
      
    private Singleton()  
    { 
        // private constructor 
    } 
      
    // implement readResolve method 
    protected Object readResolve() 
    { 
        return instance; 
    } 
} 
  
public class GFG  
{ 
  
    public static void main(String[] args)  
    { 
        try
        { 
            Singleton instance1 = Singleton.instance; 
            ObjectOutput out  
                = new ObjectOutputStream(new FileOutputStream("file.text")); 
            out.writeObject(instance1); 
            out.close(); 
          
            // deserailize from file to object 
            ObjectInput in  
                = new ObjectInputStream(new FileInputStream("file.text")); 
            Singleton instance2 = (Singleton) in.readObject(); 
            in.close(); 
          
            System.out.println("instance1 hashCode:- "
                                           + instance1.hashCode()); 
            System.out.println("instance2 hashCode:- "
                                           + instance2.hashCode()); 
        }  
          
        catch (Exception e) 
        { 
            e.printStackTrace(); 
        } 
    } 
} 
Output:- 
instance1 hashCode:- 1550089733
instance2 hashCode:- 1550089733
Above both hashcodes are same hence no other instance is created.

----------------------------------------------------------------------------------------

Cloning: Cloning is a concept to create duplicate objects. Using clone we can create copy of object. Suppose, we ceate clone of a singleton object, 
then it wil create a copy that is there are two instances of a singleton class, hence the class is no more singleton.

// JAVA code to explain cloning  
// issue with singleton 
class SuperClass implements Cloneable 
{ 
  int i = 10; 
  
  @Override
  protected Object clone() throws CloneNotSupportedException  
  { 
    return super.clone(); 
  } 
} 
  
// Singleton class 
class Singleton extends SuperClass 
{ 
  // public instance initialized when loading the class 
  public static Singleton instance = new Singleton(); 
  
  private Singleton()  
  { 
    // private constructor 
  } 
} 
  
public class GFG 
{ 
  public static void main(String[] args) throws CloneNotSupportedException  
  { 
    Singleton instance1 = Singleton.instance; 
    Singleton instance2 = (Singleton) instance1.clone(); 
    System.out.println("instance1 hashCode:- "
                           + instance1.hashCode()); 
    System.out.println("instance2 hashCode:- " 
                           + instance2.hashCode());  
  } 
} 
Output :- 
instance1 hashCode:- 366712642
instance2 hashCode:- 1829164700
Two different hashCode means there are 2 different objects of singleton class.

Overcome Cloning issue:- To overcome this issue, override clone() method and throw an exception from clone method that is CloneNotSupportedException. 
Now whenever user will try to create clone of singleton object, it will throw exception and hence our class remains singleton.

// JAVA code to explain overcome  
// cloning issue with singleton 
class SuperClass implements Cloneable 
{ 
  int i = 10; 
  
  @Override
  protected Object clone() throws CloneNotSupportedException  
  { 
    return super.clone(); 
  } 
} 
  
// Singleton class 
class Singleton extends SuperClass 
{ 
  // public instance initialized when loading the class 
  public static Singleton instance = new Singleton(); 
  
  private Singleton()  
  { 
    // private constructor 
  } 
  
  @Override
  protected Object clone() throws CloneNotSupportedException  
  { 
    throw new CloneNotSupportedException(); 
  } 
} 
  
public class GFG 
{ 
  public static void main(String[] args) throws CloneNotSupportedException  
  { 
    Singleton instance1 = Singleton.instance; 
    Singleton instance2 = (Singleton) instance1.clone(); 
    System.out.println("instance1 hashCode:- " 
                         + instance1.hashCode()); 
    System.out.println("instance2 hashCode:- " 
                         + instance2.hashCode());  
  } 
} 
Output:-
Exception in thread "main" java.lang.CloneNotSupportedException
	at GFG.Singleton.clone(GFG.java:29)
	at GFG.GFG.main(GFG.java:38)
Now we have stopped user to create clone of singleton class. If you don;t want to throw exception you can also return the same instance from clone method.

// JAVA code to explain overcome  
// cloning issue with singleton 
class SuperClass implements Cloneable 
{ 
  int i = 10; 
  
  @Override
  protected Object clone() throws CloneNotSupportedException  
  { 
    return super.clone(); 
  } 
} 
  
// Singleton class 
class Singleton extends SuperClass 
{ 
  // public instance initialized when loading the class 
  public static Singleton instance = new Singleton(); 
  
  private Singleton()  
  { 
    // private constructor 
  } 
  
  @Override
  protected Object clone() throws CloneNotSupportedException  
  { 
    return instance; 
  } 
} 
  
public class GFG 
{ 
  public static void main(String[] args) throws CloneNotSupportedException  
  { 
    Singleton instance1 = Singleton.instance; 
    Singleton instance2 = (Singleton) instance1.clone(); 
    System.out.println("instance1 hashCode:- " 
                           + instance1.hashCode()); 
    System.out.println("instance2 hashCode:- "
                           + instance2.hashCode());  
  } 
} 
Output:-
instance1 hashCode:- 366712642
instance2 hashCode:- 366712642
Now, as hashcode of both the instances is same that means they represent a single instance.