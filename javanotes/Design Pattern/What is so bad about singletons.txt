(Pros)Good things first

Lazy Instantiate
Static Initialization
(Cons) Bad things

Paraphrased from Brian Button: read here â†’ What is so bad about singletons?

They are generally used as a global instance, why is that so bad? Because you hide the dependencies of your application in your code, 
instead of exposing them through the interfaces. Making something global to avoid passing it around is a code smell.

They violate the single responsibility principle: by virtue of the fact that they control their own creation and lifecycle.

They inherently cause code to be tightly coupled. This makes faking them out under test rather difficult in many cases.

They carry state around for the lifetime of the application. Another hit to testing since you can end up with a situation where tests need
 to be ordered which is a big no no for unit tests. Why? Because each unit test should be independent from the other.
 
 When to Use a Singleton Class?
There is no straightforward answer to this question. A scenario which is acceptable to some will be unacceptable to others.

However, it is commonly accepted that the singleton can yield best results in a situation where various parts of an application 
concurrently try to access a shared resource. An example of a shared resource would be Logger, Print Spooler, etc.

The following points are suggested to be considered while designing a singleton class:

Singleton classes must be memory-leak free. The instance of the singleton class is to be created once and it remains for the lifetime
 of the application.
A real singleton class is not easily extensible.
Derive the singleton class from an interface. This helps while doing unit testing (using Dependency Injection).