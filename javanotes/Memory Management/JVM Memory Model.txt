JVM Memory Model
===================
Java Memory Management are very important if you want to understand the working 
of Java Garbage Collection. Today we will look into memory management in Java, 
different parts of JVM memory and how to monitor and perform garbage collection tuning.

As you can see in the above image, JVM memory is divided into separate parts. At broad level, 
JVM Heap memory is physically divided into two parts – Young Generation and Old Generation.

Memory Management in Java – Young Generation
The young generation is the place where all the new objects are created. When the young 
generation is filled, garbage collection is performed. This garbage collection is called 
Minor GC. Young Generation is divided into three parts – Eden Memory and two Survivor Memory spaces.

Important Points about Young Generation Spaces:
----------------------------------------------------
Most of the newly created objects are located in the Eden memory space.
When Eden space is filled with objects, Minor GC is performed and all the survivor objects are 
moved to one of the survivor spaces.
Minor GC also checks the survivor objects and move them to the other survivor space. So at a time, 
one of the survivor space is always empty.
Objects that are survived after many cycles of GC, are moved to the Old generation memory space. 
Usually, it’s done by setting a threshold for the age of the young generation objects before they 
become eligible to promote to Old generation.

Memory Management in Java – Old Generation
=================================================
Old Generation memory contains the objects that are long-lived and survived after many rounds of Minor GC. 
Usually, garbage collection is performed in Old Generation memory when it’s full. Old Generation Garbage 
Collection is called Major GC and usually takes a longer time.

Stop the World Event
All the Garbage Collections are “Stop the World” events because all application threads are stopped 
until the operation completes.

Since Young generation keeps short-lived objects, Minor GC is very fast and the application doesn’t get affected by this.

However, Major GC takes a long time because it checks all the live objects. Major GC should be 
minimized because it will make your application unresponsive for the garbage collection duration.
So if you have a responsive application and there are a lot of Major Garbage Collection happening, 
you will notice timeout errors.

The duration taken by garbage collector depends on the strategy used for garbage collection. 
That’s why it’s necessary to monitor and tune the garbage collector to avoid timeouts in the 
highly responsive applications.

Java Memory Model – Permanent Generation
==========================================
Permanent Generation or “Perm Gen” contains the application metadata required by the 
JVM to describe the classes and methods used in the application. Note that Perm Gen 
is not part of Java Heap memory.

Perm Gen is populated by JVM at runtime based on the classes used by the application. 
Perm Gen also contains Java SE library classes and methods. Perm Gen objects are garbage 
collected in a full garbage collection.

Java Memory Model – Method Area
Method Area is part of space in the Perm Gen and used to store class structure 
(runtime constants and static variables) and code for methods and constructors.

Java Memory Model – Memory Pool
Memory Pools are created by JVM memory managers to create a pool of immutable objects 
if the implementation supports it. String Pool is a good example of this kind of memory pool. 
Memory Pool can belong to Heap or Perm Gen, depending on the JVM memory manager implementation.

Java Memory Model – Runtime Constant Pool
Runtime constant pool is per-class runtime representation of constant pool in a class. 
It contains class runtime constants and static methods. Runtime constant pool is part of the method area.

Java Memory Model – Java Stack Memory
Java Stack memory is used for execution of a thread. They contain method specific values 
that are short-lived and references to other objects in the heap that is getting referred 
from the method. You should read Difference between Stack and Heap Memory.

Memory Management in Java – Java Heap Memory Switches
Java provides a lot of memory switches that we can use to set the memory sizes and their ratios. 
Some of the commonly used memory switches are:

VM Switch	VM Switch Description
-Xms	For setting the initial heap size when JVM starts
-Xmx	For setting the maximum heap size.
-Xmn	For setting the size of the Young Generation, rest of the space goes for Old Generation.
-XX:PermGen	For setting the initial size of the Permanent Generation memory
-XX:MaxPermGen	For setting the maximum size of Perm Gen
-XX:SurvivorRatio	For providing ratio of Eden space and Survivor Space, for example if Young 
Generation size is 10m and VM switch is -XX:SurvivorRatio=2 then 5m will be reserved for Eden 
Space and 2.5m each for both the Survivor spaces. The default value is 8.
-XX:NewRatio	For providing ratio of old/new generation sizes. The default value is 2.
Most of the times, above options are sufficient, but if you want to check out other options too 
then please check JVM Options Official Page.

Memory Management in Java – Java Garbage Collection
Java Garbage Collection is the process to identify and remove the unused objects from the memory
and free space to be allocated to objects created in future processing. One of the best features of 
Java programming language is the automatic garbage collection, unlike other programming languages 
such as C where memory allocation and deallocation is a manual process.

Garbage Collector is the program running in the background that looks into all the objects in the
 memory and find out objects that are not referenced by any part of the program. All these 
 unreferenced objects are deleted and space is reclaimed for allocation to other objects.

One of the basic ways of garbage collection involves three steps:
=====================================================================
Marking: This is the first step where garbage collector identifies which objects 
are in use and which ones are not in use.

Normal Deletion: Garbage Collector removes the unused objects and reclaim the 
free space to be allocated to other objects.

Deletion with Compacting: For better performance, after deleting unused objects, 
all the survived objects can be moved to be together. This will increase the performance 
of allocation of memory to newer objects.
There are two problems with a simple mark and delete approach.

First one is that it’s not efficient because most of the newly created objects will become unused
Secondly objects that are in-use for multiple garbage collection cycle are most likely to be in-use for future cycles too.
The above shortcomings with the simple approach is the reason that Java Garbage Collection is Generational and we have Young Generation and Old Generation spaces in the heap memory. I have already explained above how objects are scanned and moved from one generational space to another based on the Minor GC and Major GC.

Memory Management in Java – Java Garbage Collection Types
================================================================
There are five types of garbage collection types that we can use in our applications. 
We just need to use the JVM switch to enable the garbage collection strategy for the application.
Let’s look at each of them one by one.

Serial GC (-XX:+UseSerialGC): Serial GC uses the simple mark-sweep-compact approach for young 
and old generations garbage collection i.e Minor and Major GC.Serial GC is useful in client 
machines such as our simple stand-alone applications and machines with smaller CPU. It is good 
for small applications with low memory footprint.

Parallel GC (-XX:+UseParallelGC): Parallel GC is same as Serial GC except that is spawns N threads 
for young generation garbage collection where N is the number of CPU cores in the system. We can 
control the number of threads using -XX:ParallelGCThreads=n JVM option.Parallel Garbage Collector 
is also called throughput collector because it uses multiple CPUs to speed up the GC performance. 
Parallel GC uses a single thread for Old Generation garbage collection.

Parallel Old GC (-XX:+UseParallelOldGC): This is same as Parallel GC except that it uses multiple 
threads for both Young Generation and Old Generation garbage collection.

Concurrent Mark Sweep (CMS) Collector (-XX:+UseConcMarkSweepGC): CMS Collector is also referred as 
concurrent low pause collector. It does the garbage collection for the Old generation. CMS collector 
tries to minimize the pauses due to garbage collection by doing most of the garbage collection work 
concurrently with the application threads.CMS collector on the young generation uses the same 
algorithm as that of the parallel collector. This garbage collector is suitable for responsive 
applications where we can’t afford longer pause times. We can limit the number of threads in 
CMS collector using -XX:ParallelCMSThreads=n JVM option.

G1 Garbage Collector (-XX:+UseG1GC): The Garbage First or G1 garbage collector is available from Java 7 
and its long term goal is to replace the CMS collector. The G1 collector is a parallel, concurrent, 
and incrementally compacting low-pause garbage collector.Garbage First Collector doesn’t work like 
other collectors and there is no concept of Young and Old generation space. It divides the heap 
space into multiple equal-sized heap regions. When a garbage collection is invoked, it first 
collects the region with lesser live data, hence “Garbage First”. You can find more details 
about it at Garbage-First Collector Oracle Documentation.