Stream.map() vs Stream.flatMap() in Java 8
==================================================

In short, here are the key difference between map() vs flatMap() in Java 8:
---------------------------------------------------------------------------------
The function you pass to map() operation returns a single value.
The function you pass to flatMap() operation returns a Stream of value.
flatMap() is a combination of map and flat operation. 
map() is used for transformation only, but flatMap() is used for both transformation and flattening. 

The flatMap() function can take a Stream of List and return Stream of values combined from all
 those lists. In the example below, we have collected the result in a List but you can also print 
 them using the forEach() method of Java 8.

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Java Program to demonstrate difference between map()
 * vs flatMap() function in Java 8. Both are defined
 * in Stream class. 
 *
 * @author WINDOWS 8
 */
public class Java8Demo {

    public static void main(String args[]) {

        // foods which helps in weight loss
        List<String> loseWeight = new ArrayList<>();
        loseWeight.add("avocados");
        loseWeight.add("beans");
        loseWeight.add("salad");
        loseWeight.add("oats");
        loseWeight.add("broccoli");
                
        System.out.println("list of String : " + loseWeight);
        
        // let's use map() method to convert list of weight
        // lose food, which are String to list of ints
        // which are length of each food String
        
        List listOfInts = loseWeight.stream()
                .map(s -> s.length())
                .collect(Collectors.toList());
        
        System.out.println("list of ints generate by map(): " + listOfInts);

        
        // flatMap() example, let's first creat a list of list
        List<List> listOfListOfNumber = new ArrayList<>();
        listOfListOfNumber.add(Arrays.asList(2, 4));
        listOfListOfNumber.add(Arrays.asList(3, 9));
        listOfListOfNumber.add(Arrays.asList(4, 16));
        
        System.out.println("list of list : " + listOfListOfNumber);
        
        // let's use flatMap() to flatten this list into
        // list of integers i.e. 2,4,3,9,4,16
        
        List listOfIntegers = listOfListOfNumber.stream()
                .flatMap( list -> list.stream())
                .collect(Collectors.toList());
        
        System.out.println("list of numbers generated by flatMap : " 
                                      + listOfIntegers);
                

    }

}

Output
list of String : [avocados, beans, salad, oats, broccoli]
list of ints generate by map(): [8, 5, 5, 4, 8]
list of list : [[2, 4], [3, 9], [4, 16]]
list of numbers generated by flatMap : [2, 4, 3, 9, 4, 16]

You can see that in the first example, the function used by map() method returns a single value, 
the length of the string passed to it, while in case of flatMap() the method returns a stream, 
which is basically your multiple values.